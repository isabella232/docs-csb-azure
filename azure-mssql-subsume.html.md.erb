---
title: Subsuming a Microsoft Azure Service Broker MSSQL Database Instance
owner: Cloud Service Broker
---

<strong><%= modified_date %></strong>

<p class="note">
  <strong>Note:</strong> The pattern for subsuming existing instances in v1.1.0 differs from the process
  detailed in v1.0.0.
  Please note that the "subsume" plan for MSSQL only exists in v1.1.0.
  For customers using v1.0.0 (highly discouraged) please refer to
  <a href = https://docs.pivotal.io/cloud-service-broker/1-0/installing-with-azure.html>
  the documentation in v1.0.0 found here. </a>
</p>

This topic describes moving an MSSQL database instance
from the Microsoft Azure Service Broker for VMware Tanzu tile
to the <%= vars.product_short %> on Azure tile.

This process of moving control of an instance from one broker tile
to another is called _subsuming_ the instance.

## <a id='about'></a> About Subsuming MSSQL Database Instance

Because the Microsoft Azure Service Broker (MASB) for VMware Tanzu tile
is going out of support, it is important to move MSSQL database instances that
were created by the MASB over to the <%= vars.product_short %>.

Subsuming the instance allows you to move the database from the control of one broker
to the control of another without migrating the data.

**After the subsuming process, you can manage the instance and the associated MSSQL database
just like any other service instance.**

For general information about the Microsoft Azure Service Broker for VMware Tanzu tile,
see [Azure Service Broker](https://docs.pivotal.io/partners/azure-sb/index.html).

## <a id='process'></a> Overview of the Process

Detailed steps for subsuming are given below.
However, the outline of the process is:

+ Create a new Cloud Service-brokered instance
+ Import information about the MSSQL database instance using the "subsume" plan in the Cloud Foundry Marketplace (`cf m`).
+ Unbind apps from the old MAS-brokered instance.
+ Bind apps to the new <%= vars.product_short %> instance.
+ Purge the connections between the old MAS-brokered instance and the MSSQL database (**don't delete service instances**, more on that later).
+ Restage any apps which were connected to the legacy database.


##<a id="prereq"></a> Prerequisite


See [Broker Config](https://docs.pivotal.io/partners/azure-sb/installing.html#broker-config),
in _Installing and Configuring Microsoft Azure Service Broker_.

## <a id='subsume'></a> Subsume a Microsoft Azure Service Broker (MASB) MSSQL Database Instance

To subsume control of an existing MASB-brokered MSSQL database instance to
the <%= vars.product_short %>:

1. Get the MAS-brokered database instance details by running:

    ```
    cf service MASB-SERVICE-INSTANCE
    ```

    Where is `MASB-SERVICE-INSTANCE` is the name of the service instance,
    the MAS-brokered database instance.

    For example:

    <pre class="terminal">$ cf service masb-instance
    Showing info of service <masb instance> in org ...

    name:            masb-instance
    service:         azure-sqldb
    tags:
    plan:            basic
    description:     Azure SQL Database Service
    documentation:
    dashboard:

    Showing status of last operation from service masb-instance...

    status:    create succeeded
    message:   Created logical database database-name on logical server server-name.
    started:   2020-08-20T21:06:57Z
    updated:   2020-08-20T21:08:04Z
    </pre>


2. Get the Azure resource ID for the database by running the following on the Azure CLI:

    ```
    az sql db show  --name DATABASE-NAME --server SERVER-NAME \
    --resource-group SERVER-RESOURCE-GROUP --query id -o tsv
    ```

    Where:
    * `DATABASE-NAME` and `SERVER-NAME` are the logical names in the `message` line of the output in the step above.
    * `SERVER-RESOURCE-GROUP` is the **Default Resource Group** in the Default Parameters Config pane
      of the Azure Service Broker tile.
      See [Default Parameters Config](https://docs.pivotal.io/partners/azure-sb/installing.html#defaultparameters-config)
      in _Installing and Configuring Microsoft Azure Service Broker_.

    For example:

    <pre class="terminal">
    $ az sql db show  --name database-name --server server-name \
      --resource-group azure-service-broker --query id -o tsv
    </pre>

    The variable in the next step, `AZURE-RESOURCE-ID`, refers to the output of this command in full. An example output has been provided below

    ```
    /subscriptions/000abc00-0000-00ab-0abc-00000000/resourceGroups/resource-group/providers/Microsoft.Sql/servers/server-name/databases/database-name
    ```

3. Create a new MSSQL service instance using <%= vars.product_short %>  and
   import the existing MSSQL resource by choosing the "subsume" plan and including the metadata as shown:

    ```
    cf create-service csb-azure-mssql-db subsume NEW-SERVICE-INSTANCE -c '{"azure_db_id", "AZURE-RESOURCE-ID", "server": "test_server"}'
    ```

    Where:
    * `NEW-SERVICE-INSTANCE` is a name you choose for the new service instance
       that <%= vars.product_short %> creates to replace the MSAB service instance.
    * `SERVER-ADMIN-PASSWORD` is the admin password for the database.
       See [Prerequisite](#prereq) above.
    * `AZURE-RESOURCE-ID` is found in the output of step 2 above.


    For example:

    <pre class="terminal">
$ cf create-service csb-azure-mssql-db subsume secondary-db -c \
 '{"admin_password":"PA55W0RD","azure_db_id":"/subscriptions/000abc00-0000-00ab-0abc-00000000/resourceGroups/broker/providers/Microsoft.Sql/servers/masb-test-server/databases/test-db"}'
    </pre>


4. Disconnect the app from the MASB service binding by running:

    ```
    cf unbind-service APP-NAME MASB-SERVICE-INSTANCE
    ```

    Where:
    * `APP-NAME` is the app using the database.
    * `MASB-SERVICE-INSTANCE` is the name of the service instance,
    the MAS-brokered database instance.

    <pre class="terminal">
$ cf unbind-service my-app masb-instance
    </pre>

5. Bind the app to the new service instance by running:

    ```
    cf bind-service APP-NAME NEW-SERVICE-INSTANCE
    ```

    Where `NEW-SERVICE-INSTANCE` is the name of the <%= vars.product_short %> service instance
    that you created in step 3 above.

    For example:

    <pre class="terminal">$cf bind-service my-app secondary-db </pre>

    Because Cloud Service Broker creates new credentials at bind time,
    this creates new binding credentials for the app.

6. Restage the app

    ```
    cf restage test-spring
    ```

1. Remove record of the old MAS-brokered database instance and any child objects
   from Cloud Foundry by running:

    ```
    cf purge-service-instance MASB-SERVICE-INSTANCE
    ```

    For example:

    <pre class="terminal">$ cf purge-service-instance masb-instance</pre>

    <p class="note warning"><strong> Warning:</strong> Do not run <code>cf delete-service</code>
    because then the Microsoft Azure Service Broker deletes the Azure MSSQL resource, that is, the database.
</p>

## <a id="next-steps"></a> Next Steps

When all MAS-brokered service instances for all apps have been moved to Cloud Service-brokered instances,
you can uninstall the Microsoft Azure Service Broker for VMware Tanzu tile
from <%= vars.ops_manager %>.
